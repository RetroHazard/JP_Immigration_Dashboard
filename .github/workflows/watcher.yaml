name: Data Watcher
on:
  schedule:
    - cron: '0 * 23-27 * *'
  workflow_dispatch:

permissions:
  contents: write
  actions: write
  id-token: write

jobs:
  pre-check:
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.check.outputs.should_proceed }}
    steps:
      - name: Set current month
        run: echo "CURRENT_MONTH=$(date +'%Y-%m')" >> "$GITHUB_ENV"

      - name: Check for previous successful runs in current month
        id: check
        uses: actions/github-script@v6
        with:
          script: |
            const workflowFile = 'watcher.yaml';
            try {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowFile,
                status: 'success',
                created: `>=${process.env.CURRENT_MONTH}-01`,
                per_page: 1
              });

              const hasRun = runs.workflow_runs.some(run => 
                ['workflow_dispatch', 'schedule'].includes(run.event)
              );

              core.setOutput('should_proceed', !hasRun);
            } catch (error) {
              core.setOutput('should_proceed', 'false');
              core.info(`Check failed, Stopping: ${error}`);
            }

  check-updates:
    needs: pre-check
    if: ${{ needs.pre-check.outputs.should_proceed == 'true' }}
    runs-on: ubuntu-latest
    concurrency:
      group: watcher-${{ github.ref }}
      cancel-in-progress: true

    env:
      DATA_PATH: public/datastore/statData.json

    steps:
      - name: Set environment variable for CURRENT_MONTH
        run: echo "CURRENT_MONTH=$(date +'%Y-%m')" >> "$GITHUB_ENV"

      - name: Restore previous data
        uses: actions/cache@v4
        id: data-cache
        with:
          path: ${{ env.DATA_PATH }}
          key: estat-data-${{ hashFiles(env.DATA_PATH) }}
          restore-keys: |
            estat-data-

      - name: Download new data
        run: |
          mkdir -p $(dirname "$DATA_PATH")
          # Backup existing data to prev file if present
          if [ -f "$DATA_PATH" ]; then
            dir=$(dirname "$DATA_PATH")
            filename=$(basename "$DATA_PATH")
            cp "$DATA_PATH" "$dir/prev-$filename"
          fi
          curl -L "https://api.e-stat.go.jp/rest/3.0/app/json/getStatsData?appId=${{ secrets.ESTAT_APP_ID }}&lang=J&statsDataId=0003449073&metaGetFlg=Y&cntGetFlg=N&explanationGetFlg=Y&annotationGetFlg=Y&sectionHeaderFlg=1&replaceSpChars=0" --fail -o "$DATA_PATH" || {
              echo "::error::API request failed with status $?"
              exit 1
            }

      - name: Validate and compare data
        id: data-diff
        run: |
          if [ ! -f "$DATA_PATH" ]; then
            echo "::error::Download failed"
            exit 1
          fi

          dir=$(dirname "$DATA_PATH")
          filename=$(basename "$DATA_PATH")
          prev_file="$dir/prev-$filename"

          # Check if previous data exists
          if [ ! -f "$prev_file" ]; then
            echo "No previous data, changes detected"
            exit 0
          fi

          # Extract current dates
          current_survey=$(jq -r '.GET_STATS_DATA.STATISTICAL_DATA.TABLE_INF.SURVEY_DATE' "$DATA_PATH")
          current_updated=$(jq -r '.GET_STATS_DATA.STATISTICAL_DATA.TABLE_INF.UPDATED_DATE' "$DATA_PATH")

          # Extract previous dates
          prev_survey=$(jq -r '.GET_STATS_DATA.STATISTICAL_DATA.TABLE_INF.SURVEY_DATE' "$prev_file")
          prev_updated=$(jq -r '.GET_STATS_DATA.STATISTICAL_DATA.TABLE_INF.UPDATED_DATE' "$prev_file")

          # Compare dates
          if [ "$current_survey" != "$prev_survey" ] || [ "$current_updated" != "$prev_updated" ]; then
            echo "Dates changed, proceeding"
            exit 0
          else
            echo "No changes in SURVEY_DATE or UPDATED_DATE"
            exit 1
          fi

      - name: Cache new data
        if: steps.data-diff.outcome == 'success'
        uses: actions/cache@v4
        id: cache-step
        with:
          path: ${{ env.DATA_PATH }}
          key: estat-data-${{ hashFiles(env.DATA_PATH) }}

      - name: Clean old caches
        if: steps.data-diff.outcome == 'success'
        uses: actions/github-script@v6
        env:
          CURRENT_CACHE_KEY: ${{ steps.cache-step.outputs.cache-primary-key }}
        with:
          script: |
            const { data } = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: 'estat-data-'
            });
            
            for (const cache of data.actions_caches) {
              if (cache.key !== process.env.CURRENT_CACHE_KEY) {
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id
                });
              }
            }

      - name: Trigger build
        if: steps.data-diff.outcome == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build.yaml',
              ref: 'main'
            })